function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup some useful variables
m = size(X, 1);
         
% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m
%
% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.
%
% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%

%To compute the unregularized cost function, the first thing I need to do is feed-forward to compute
%the predicted values. Fortunately, this is what I did in ex3, so I will just copy
%the code from over there:

size(Theta1)
size(Theta2)

%Add column of 1s to X
X = [ones(m,1) X];
size(X)
%Feed forward for first layer
%Compute z2 using Theta 1
z2 = Theta1 * X';
%Compute a2 with sigmoid
a2 = sigmoid(z2);
%Tranpose a2
a2 = a2';
%Add column of ones for bias unit
a2 = [ones(m,1) a2];
size(a2)

%Feed forward for second layer
%Compute z3 using Theta2
z3 = Theta2 * a2';
%Compute a3 with sigmoid
a3 = sigmoid(z3);
%Transpose a3
a3 = a3';
size(a3)

%Prediction is the output of the second layer
hTheta = a3;

%Recode y so that its a K dimensional vector that is all zeros except at the correct label
ytemp = zeros(m, num_labels);
for i = 1:m
  ytemp(i,y(i)) = 1;
end
y = ytemp;

%Now that we have the prediction, calculate the cost
J = (1/m)*sum(sum(-y .* log(hTheta) - (1-y) .* log(1-hTheta)));

%%Calculate regularization term

%%First, calculate square theta terms for both layers
thetaSq1 = Theta1.*Theta1;
thetaSq2 = Theta2.*Theta2;

%%Next calculate reg term. Note that I assume only that there are two layers,
%%but nothing about their sizes. Also, do not include first column (which corresponds
%%to the bias) in regularization
Jreg = (lambda/(2*m))* ( sum(sum(thetaSq1(:,2:end))) + sum(sum(thetaSq2(:,2:end))) );

%%Add regularization term to unregularized cost function
J = J + Jreg;


%% Backpropogation
%% I don't think this is the most efficient possible implementation in this context
%% but its what the exercise says I should do...so I will do it.

delta3 = zeros(m,num_labels);
for t=1:m
  %%a1 = X(m,:);
  delta3(t,:) = a3(t,:) - y(t,:);
end

% -------------------------------------------------------------

% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end
